{"version":3,"sources":["resume.pdf","images/myface sync nonrecursive //.(png|jpe?g|svg)$","images/myface/child.jpg","images/myface/compbuild.jpg","images/myface/happybestbuy.jpg","images/myface/mexico.jpg","images/myface/myface.jpg","images/myface/pride.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./child.jpg","./compbuild.jpg","./happybestbuy.jpg","./mexico.jpg","./myface.jpg","./pride.jpg","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","App","faceImgs","r","images","item","push","importAllFaceImgs","require","colors","getRandomImageURL","Math","floor","random","length","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","react_default","a","createElement","className","firstImageURL","_useState","useState","_useState2","slicedToArray","imageURL","setImageURL","newImageURL","src","alt","role","aria-label","_useState3","_useState4","linkColor","setLinkColor","newLinkColor","getRandomColor","linkStyle","color","style","href","resume","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba772deb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.29200930.pdf\";","var map = {\n\t\"./child.jpg\": 14,\n\t\"./compbuild.jpg\": 15,\n\t\"./happybestbuy.jpg\": 16,\n\t\"./mexico.jpg\": 17,\n\t\"./myface.jpg\": 18,\n\t\"./pride.jpg\": 19\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 13;","module.exports = __webpack_public_path__ + \"static/media/child.f3b007ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/compbuild.ae1d45f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/happybestbuy.0df9f3db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mexico.4f61b1d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/myface.822f1dee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pride.f2d6a865.jpg\";","import React, { useState, useEffect, useRef } from 'react';\nimport resume from './resume.pdf';\nimport './App.css';\n\n\nconst App = () => {\n\n  const importAllFaceImgs = (r) => {\n    let images = [];\n    r.keys().map((item) => { images.push(r(item)); });\n    return images;\n  }\n\n  const faceImgs = importAllFaceImgs(require.context('./images/myface', false, /\\.(png|jpe?g|svg)$/));\n  const colors = ['#24d05a', '#eb4888', '#10a2f5', '#e9bc3f'];\n\n  // image component that will update w random image URL\n  const RotatingPhoto = () => {\n    const firstImageURL = getRandomImageURL(faceImgs);\n    const [imageURL, setImageURL] = useState(firstImageURL);\n    \n    useInterval(() => {\n      let newImageURL = getRandomImageURL(faceImgs);\n      setImageURL(newImageURL);\n    }, 3000);\n\n    return (\n      <img src={imageURL} alt=\"Jess Anastasio\" />\n    );\n  }\n  \n  // given array of images, choose random index\n  const getRandomImageURL = (faceImgs) => {\n    return faceImgs[Math.floor(Math.random() * faceImgs.length)];    \n  }\n\n  const getRandomColor = (colors) => {\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  const Links = () => {\n    const [linkColor, setLinkColor] = useState(colors[0]);\n\n    useInterval(() => {\n      let newLinkColor = getRandomColor(colors);\n      setLinkColor(newLinkColor);\n    }, 3000);\n\n    let linkStyle = { color: linkColor };\n\n    return (\n      <div className=\"links\">\n        <a style={linkStyle} href=\"http://twitter.com/jessanastasio\">twitter</a>\n        <a style={linkStyle} href=\"http://linkedin.com/in/jessicaanastasio\">linkedin</a>\n        <a style={linkStyle} href=\"http://github.com/jessanastasio\">github</a>\n        <a style={linkStyle} href={resume}>resume</a>\n        <a style={linkStyle} href=\"mailto:jessicaanastasio39@gmail.com\">email</a>\n      </div>\n    );\n  }\n\n  const useInterval = (callback, delay) => {\n    const savedCallback = useRef();\n\n    // Remember the latest function.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"img-container\">\n          <RotatingPhoto/>\n        </div>\n        <div className=\"about-me\">\n          <h2>Hi, I'm Jess!</h2>\n          <ol>\n            <li><span className=\"about-emoji\" role=\"img\" aria-label=\"star\">ðŸŒŸ</span> software engineer in nyc</li>\n            <li><span className=\"about-emoji\" role=\"img\" aria-label=\"heart\">ðŸ’•</span> loves javascript</li>\n            <li><span className=\"about-emoji\" role=\"img\" aria-label=\"disk\">ðŸ’¾</span> huge tech nerd</li>\n            <li><span className=\"about-emoji\" role=\"img\" aria-label=\"mic\">ðŸŽ¤</span> karaoke fan</li>\n          </ol>\n        </div>\n      </div>\n\n      <Links />\n\n      {/* <div className=\"more\">\n        <button>keep clickin to learn more</button>\n      </div> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}